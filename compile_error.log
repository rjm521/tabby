warning: elided lifetime has a name
  --> crates/tabby-inference/src/completion.rs:20:84
   |
20 |     async fn generate(&self, prompt: &str, options: CompletionOptions) -> BoxStream<String>;
   |                       - lifetime `'life0` declared here                            ^ this elided lifetime gets resolved as `'life0`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default

warning: `tabby-inference` (lib) generated 1 warning
warning: elided lifetime has a name
  --> crates/ollama-api-bindings/src/completion.rs:23:84
   |
23 |     async fn generate(&self, prompt: &str, options: CompletionOptions) -> BoxStream<String> {
   |                       - lifetime `'life0` declared here                            ^ this elided lifetime gets resolved as `'life0`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default

warning: `ollama-api-bindings` (lib) generated 1 warning
warning: elided lifetime has a name
  --> crates/http-api-bindings/src/completion/llama.rs:47:84
   |
47 |     async fn generate(&self, prompt: &str, options: CompletionOptions) -> BoxStream<String> {
   |                       - lifetime `'life0` declared here                            ^ this elided lifetime gets resolved as `'life0`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default

warning: elided lifetime has a name
  --> crates/http-api-bindings/src/completion/mistral.rs:70:84
   |
70 |     async fn generate(&self, prompt: &str, options: CompletionOptions) -> BoxStream<String> {
   |                       - lifetime `'life0` declared here                            ^ this elided lifetime gets resolved as `'life0`

warning: elided lifetime has a name
  --> crates/http-api-bindings/src/completion/openai.rs:67:84
   |
67 |     async fn generate(&self, prompt: &str, options: CompletionOptions) -> BoxStream<String> {
   |                       - lifetime `'life0` declared here                            ^ this elided lifetime gets resolved as `'life0`

warning: elided lifetime has a name
  --> crates/http-api-bindings/src/rate_limit.rs:63:84
   |
63 |     async fn generate(&self, prompt: &str, options: CompletionOptions) -> BoxStream<String> {
   |                       - lifetime `'life0` declared here                            ^ this elided lifetime gets resolved as `'life0`

warning: elided lifetime has a name
  --> crates/tabby-index/src/structured_doc/types/commit.rs:41:19
   |
39 |         &self,
   |         - lifetime `'life0` declared here
40 |         embedding: Arc<dyn Embedding>,
41 |     ) -> BoxStream<JoinHandle<Result<(Vec<String>, serde_json::Value)>>> {
   |                   ^ this elided lifetime gets resolved as `'life0`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default

warning: elided lifetime has a name
  --> crates/tabby-index/src/structured_doc/types/issue.rs:41:19
   |
39 |         &self,
   |         - lifetime `'life0` declared here
40 |         embedding: Arc<dyn Embedding>,
41 |     ) -> BoxStream<JoinHandle<Result<(Vec<String>, serde_json::Value)>>> {
   |                   ^ this elided lifetime gets resolved as `'life0`

warning: elided lifetime has a name
  --> crates/tabby-index/src/structured_doc/types/page.rs:37:19
   |
35 |         &self,
   |         - lifetime `'life0` declared here
36 |         embedding: Arc<dyn Embedding>,
37 |     ) -> BoxStream<JoinHandle<Result<(Vec<String>, serde_json::Value)>>> {
   |                   ^ this elided lifetime gets resolved as `'life0`

warning: elided lifetime has a name
  --> crates/tabby-index/src/structured_doc/types/pull.rs:50:19
   |
48 |         &self,
   |         - lifetime `'life0` declared here
49 |         embedding: Arc<dyn Embedding>,
50 |     ) -> BoxStream<JoinHandle<Result<(Vec<String>, serde_json::Value)>>> {
   |                   ^ this elided lifetime gets resolved as `'life0`

warning: elided lifetime has a name
  --> crates/tabby-index/src/structured_doc/types/web.rs:37:19
   |
35 |         &self,
   |         - lifetime `'life0` declared here
36 |         embedding: Arc<dyn Embedding>,
37 |     ) -> BoxStream<JoinHandle<Result<(Vec<String>, serde_json::Value)>>> {
   |                   ^ this elided lifetime gets resolved as `'life0`

warning: elided lifetime has a name
  --> crates/tabby-index/src/structured_doc/types.rs:72:19
   |
70 |         &self,
   |         - lifetime `'life0` declared here
71 |         embedding: Arc<dyn Embedding>,
72 |     ) -> BoxStream<JoinHandle<Result<(Vec<String>, serde_json::Value)>>>;
   |                   ^ this elided lifetime gets resolved as `'life0`

warning: elided lifetime has a name
   --> crates/tabby-index/src/structured_doc/types.rs:111:19
    |
109 |         &self,
    |         - lifetime `'life0` declared here
110 |         embedding: Arc<dyn Embedding>,
111 |     ) -> BoxStream<JoinHandle<Result<(Vec<String>, serde_json::Value)>>> {
    |                   ^ this elided lifetime gets resolved as `'life0`

warning: function `index_repository` is never used
  --> crates/tabby-index/src/code/index.rs:25:14
   |
25 | pub async fn index_repository(
   |              ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `http-api-bindings` (lib) generated 4 warnings
warning: `tabby-index` (lib) generated 8 warnings
warning: elided lifetime has a name
   --> crates/llama-cpp-server/src/lib.rs:110:84
    |
110 |     async fn generate(&self, prompt: &str, options: CompletionOptions) -> BoxStream<String> {
    |                       - lifetime `'life0` declared here                            ^ this elided lifetime gets resolved as `'life0`
    |
    = note: `#[warn(elided_named_lifetimes)]` on by default

warning: `llama-cpp-server` (lib) generated 1 warning
warning: multiple fields are never read
  --> ee/tabby-db/src/user_completions.rs:12:9
   |
11 | pub struct UserCompletionDAO {
   |            ----------------- fields in this struct
12 |     pub user_id: i64,
   |         ^^^^^^^
13 |     pub completion_id: String,
   |         ^^^^^^^^^^^^^
14 |     pub language: String,
   |         ^^^^^^^^
15 |
16 |     pub views: i64,
   |         ^^^^^
17 |     pub selects: i64,
   |         ^^^^^^^
18 |     pub dismisses: i64,
   |         ^^^^^^^^^
19 |
20 |     pub created_at: DateTime<Utc>,
   |         ^^^^^^^^^^
21 |     pub updated_at: DateTime<Utc>,
   |         ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `tabby-db` (lib) generated 1 warning
warning: field `timestamp` is never read
 --> crates/tabby-crawler/src/types.rs:7:9
  |
6 | pub struct KatanaRequestResponse {
  |            --------------------- field in this struct
7 |     pub timestamp: String,
  |         ^^^^^^^^^
  |
  = note: `KatanaRequestResponse` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
  = note: `#[warn(dead_code)]` on by default

warning: fields `method` and `raw` are never read
  --> crates/tabby-crawler/src/types.rs:14:9
   |
13 | pub struct KatanaRequest {
   |            ------------- fields in this struct
14 |     pub method: String,
   |         ^^^^^^
15 |     pub endpoint: String,
16 |     pub raw: String,
   |         ^^^
   |
   = note: `KatanaRequest` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `technologies` is never read
  --> crates/tabby-crawler/src/types.rs:24:9
   |
20 | pub struct KatanaResponse {
   |            -------------- field in this struct
...
24 |     pub technologies: Option<Vec<String>>,
   |         ^^^^^^^^^^^^
   |
   = note: `KatanaResponse` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: use of deprecated struct `tantivy::time::Instant`: import `time::ext::InstantExt` instead
 --> crates/tabby-index-cli/src/timer.rs:2:20
  |
2 | use tantivy::time::Instant;
  |                    ^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated tuple struct `tantivy::time::Instant`: import `time::ext::InstantExt` instead
 --> crates/tabby-index-cli/src/timer.rs:2:20
  |
2 | use tantivy::time::Instant;
  |                    ^^^^^^^

warning: use of deprecated struct `tantivy::time::Instant`: import `time::ext::InstantExt` instead
 --> crates/tabby-index-cli/src/timer.rs:7:12
  |
7 |     start: Instant,
  |            ^^^^^^^

warning: use of deprecated struct `tantivy::time::Instant`: import `time::ext::InstantExt` instead
  --> crates/tabby-index-cli/src/timer.rs:20:20
   |
20 |             start: Instant::now(),
   |                    ^^^^^^^

warning: use of deprecated struct `tantivy::time::Instant`: import `time::ext::InstantExt` instead
  --> crates/tabby-index-cli/src/timer.rs:61:20
   |
61 |             start: Instant::now(),
   |                    ^^^^^^^

warning: unused variable: `index_dir`
  --> crates/tabby-index-cli/src/commands/create.rs:31:23
   |
31 | pub fn run_create_cli(index_dir: &std::path::Path, args: &CreateArgs) -> anyhow::Result<()> {
   |                       ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_index_dir`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: method `open` is never used
  --> crates/tabby-index-cli/src/timer.rs:16:12
   |
11 | impl OpenTimer<'_> {
   | ------------------ method in this implementation
...
16 |     pub fn open(&mut self, name: &'static str) -> OpenTimer<'_> {
   |            ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `tabby-crawler` (lib) generated 3 warnings
warning: `tabby-index-cli` (bin "tabby-index-cli") generated 7 warnings
   Compiling tabby v0.1.0 (/data/workspace/tabby/crates/tabby)
warning: unexpected `cfg` condition name: `text`
  --> ee/tabby-webserver/src/axum/mod.rs:24:12
   |
24 | #[cfg_attr(text, axum::debug_handler)]
   |            ^^^^ help: there is a config with a similar name: `test`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(text)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(text)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: function `tracing_context` is never used
  --> ee/tabby-webserver/src/hub.rs:15:4
   |
15 | fn tracing_context() -> tarpc::context::Context {
   |    ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: unused import: `IndexWriter`
  --> crates/tabby-server/src/api/index.rs:17:12
   |
17 |     Index, IndexWriter,
   |            ^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `repo`
  --> crates/tabby-server/src/api/index.rs:64:9
   |
64 |     let repo = match Repository::clone(&payload.source, temp_dir.path()) {
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_repo`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: `tabby-webserver` (lib) generated 2 warnings
warning: `tabby-server` (bin "tabby-server") generated 2 warnings (run `cargo fix --bin "tabby-server"` to apply 1 suggestion)
error[E0412]: cannot find type `IngestionHistory` in this scope
   --> crates/tabby/src/api/types.rs:39:57
    |
39  |     async fn get_ingestion_history(&self) -> Result<Vec<IngestionHistory>>;
    |                                                         ^^^^^^^^^^^^^^^^
...
312 | pub struct IngestionError {
    | ------------------------- similarly named struct `IngestionError` defined here
    |
help: a struct with a similar name exists
    |
39  -     async fn get_ingestion_history(&self) -> Result<Vec<IngestionHistory>>;
39  +     async fn get_ingestion_history(&self) -> Result<Vec<IngestionError>>;
    |
help: you might be missing a type parameter
    |
16  | pub trait GraphQLServiceTrait<IngestionHistory>: Send + Sync {
    |                              ++++++++++++++++++

error[E0412]: cannot find type `IngestionMetrics` in this scope
   --> crates/tabby/src/api/types.rs:41:53
    |
41  |     async fn get_ingestion_metrics(&self) -> Result<IngestionMetrics>;
    |                                                     ^^^^^^^^^^^^^^^^
...
318 | pub struct IngestionSettings {
    | ---------------------------- similarly named struct `IngestionSettings` defined here
    |
help: a struct with a similar name exists
    |
41  -     async fn get_ingestion_metrics(&self) -> Result<IngestionMetrics>;
41  +     async fn get_ingestion_metrics(&self) -> Result<IngestionSettings>;
    |
help: you might be missing a type parameter
    |
16  | pub trait GraphQLServiceTrait<IngestionMetrics>: Send + Sync {
    |                              ++++++++++++++++++

error[E0412]: cannot find type `IngestionHealth` in this scope
   --> crates/tabby/src/api/types.rs:42:52
    |
42  |     async fn get_ingestion_health(&self) -> Result<IngestionHealth>;
    |                                                    ^^^^^^^^^^^^^^^
...
305 | pub struct IngestionStats {
    | ------------------------- similarly named struct `IngestionStats` defined here
    |
help: a struct with a similar name exists
    |
42  -     async fn get_ingestion_health(&self) -> Result<IngestionHealth>;
42  +     async fn get_ingestion_health(&self) -> Result<IngestionStats>;
    |
help: you might be missing a type parameter
    |
16  | pub trait GraphQLServiceTrait<IngestionHealth>: Send + Sync {
    |                              +++++++++++++++++

error[E0412]: cannot find type `IngestionConfig` in this scope
   --> crates/tabby/src/api/types.rs:43:52
    |
43  |     async fn get_ingestion_config(&self) -> Result<IngestionConfig>;
    |                                                    ^^^^^^^^^^^^^^^
...
298 | pub struct IngestionLog {
    | ----------------------- similarly named struct `IngestionLog` defined here
    |
help: a struct with a similar name exists
    |
43  -     async fn get_ingestion_config(&self) -> Result<IngestionConfig>;
43  +     async fn get_ingestion_config(&self) -> Result<IngestionLog>;
    |
help: you might be missing a type parameter
    |
16  | pub trait GraphQLServiceTrait<IngestionConfig>: Send + Sync {
    |                              +++++++++++++++++

error[E0412]: cannot find type `IngestionConfig` in this scope
   --> crates/tabby/src/api/types.rs:44:53
    |
44  |     async fn update_ingestion_config(&self, config: IngestionConfig) -> Result<IngestionConfig>;
    |                                                     ^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `IngestionLog`
...
298 | pub struct IngestionLog {
    | ----------------------- similarly named struct `IngestionLog` defined here

error[E0412]: cannot find type `IngestionConfig` in this scope
   --> crates/tabby/src/api/types.rs:44:80
    |
44  |     async fn update_ingestion_config(&self, config: IngestionConfig) -> Result<IngestionConfig>;
    |                                                                                ^^^^^^^^^^^^^^^
...
298 | pub struct IngestionLog {
    | ----------------------- similarly named struct `IngestionLog` defined here
    |
help: a struct with a similar name exists
    |
44  -     async fn update_ingestion_config(&self, config: IngestionConfig) -> Result<IngestionConfig>;
44  +     async fn update_ingestion_config(&self, config: IngestionConfig) -> Result<IngestionLog>;
    |
help: you might be missing a type parameter
    |
16  | pub trait GraphQLServiceTrait<IngestionConfig>: Send + Sync {
    |                              +++++++++++++++++

error[E0412]: cannot find type `IngestionHistory` in this scope
   --> crates/tabby/src/api/types.rs:147:57
    |
147 |     async fn get_ingestion_history(&self) -> Result<Vec<IngestionHistory>> {
    |                                                         ^^^^^^^^^^^^^^^^
...
312 | pub struct IngestionError {
    | ------------------------- similarly named struct `IngestionError` defined here
    |
help: a struct with a similar name exists
    |
147 -     async fn get_ingestion_history(&self) -> Result<Vec<IngestionHistory>> {
147 +     async fn get_ingestion_history(&self) -> Result<Vec<IngestionError>> {
    |
help: you might be missing a type parameter
    |
58  | impl<IngestionHistory> GraphQLServiceTrait for GraphQLService {
    |     ++++++++++++++++++

error[E0412]: cannot find type `IngestionMetrics` in this scope
   --> crates/tabby/src/api/types.rs:155:53
    |
155 |     async fn get_ingestion_metrics(&self) -> Result<IngestionMetrics> {
    |                                                     ^^^^^^^^^^^^^^^^
...
318 | pub struct IngestionSettings {
    | ---------------------------- similarly named struct `IngestionSettings` defined here
    |
help: a struct with a similar name exists
    |
155 -     async fn get_ingestion_metrics(&self) -> Result<IngestionMetrics> {
155 +     async fn get_ingestion_metrics(&self) -> Result<IngestionSettings> {
    |
help: you might be missing a type parameter
    |
58  | impl<IngestionMetrics> GraphQLServiceTrait for GraphQLService {
    |     ++++++++++++++++++

error[E0412]: cannot find type `IngestionHealth` in this scope
   --> crates/tabby/src/api/types.rs:159:52
    |
159 |     async fn get_ingestion_health(&self) -> Result<IngestionHealth> {
    |                                                    ^^^^^^^^^^^^^^^
...
305 | pub struct IngestionStats {
    | ------------------------- similarly named struct `IngestionStats` defined here
    |
help: a struct with a similar name exists
    |
159 -     async fn get_ingestion_health(&self) -> Result<IngestionHealth> {
159 +     async fn get_ingestion_health(&self) -> Result<IngestionStats> {
    |
help: you might be missing a type parameter
    |
58  | impl<IngestionHealth> GraphQLServiceTrait for GraphQLService {
    |     +++++++++++++++++

error[E0412]: cannot find type `IngestionConfig` in this scope
   --> crates/tabby/src/api/types.rs:163:52
    |
163 |     async fn get_ingestion_config(&self) -> Result<IngestionConfig> {
    |                                                    ^^^^^^^^^^^^^^^
...
298 | pub struct IngestionLog {
    | ----------------------- similarly named struct `IngestionLog` defined here
    |
help: a struct with a similar name exists
    |
163 -     async fn get_ingestion_config(&self) -> Result<IngestionConfig> {
163 +     async fn get_ingestion_config(&self) -> Result<IngestionLog> {
    |
help: you might be missing a type parameter
    |
58  | impl<IngestionConfig> GraphQLServiceTrait for GraphQLService {
    |     +++++++++++++++++

error[E0412]: cannot find type `IngestionConfig` in this scope
   --> crates/tabby/src/api/types.rs:167:54
    |
167 |     async fn update_ingestion_config(&self, _config: IngestionConfig) -> Result<IngestionConfig> {
    |                                                      ^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `IngestionLog`
...
298 | pub struct IngestionLog {
    | ----------------------- similarly named struct `IngestionLog` defined here

error[E0412]: cannot find type `IngestionConfig` in this scope
   --> crates/tabby/src/api/types.rs:167:81
    |
167 |     async fn update_ingestion_config(&self, _config: IngestionConfig) -> Result<IngestionConfig> {
    |                                                                                 ^^^^^^^^^^^^^^^
...
298 | pub struct IngestionLog {
    | ----------------------- similarly named struct `IngestionLog` defined here
    |
help: a struct with a similar name exists
    |
167 -     async fn update_ingestion_config(&self, _config: IngestionConfig) -> Result<IngestionConfig> {
167 +     async fn update_ingestion_config(&self, _config: IngestionConfig) -> Result<IngestionLog> {
    |
help: you might be missing a type parameter
    |
58  | impl<IngestionConfig> GraphQLServiceTrait for GraphQLService {
    |     +++++++++++++++++

warning: unused import: `std::sync::Arc`
 --> crates/tabby/src/api/types.rs:5:5
  |
5 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

error[E0277]: `GraphQLService` doesn't implement `Debug`
  --> crates/tabby/src/api/types.rs:11:5
   |
9  | #[derive(Debug, Serialize, Deserialize, ToSchema)]
   |          ----- in this derive macro expansion
10 | pub struct AppState {
11 |     pub graphql: GraphQLService,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `GraphQLService` cannot be formatted using `{:?}`
   |
   = help: the trait `Debug` is not implemented for `GraphQLService`
   = note: add `#[derive(Debug)]` to `GraphQLService` or manually `impl Debug for GraphQLService`
help: consider annotating `GraphQLService` with `#[derive(Debug)]`
   |
47 + #[derive(Debug)]
48 | pub struct GraphQLService {
   |

error[E0277]: the trait bound `GraphQLService: Serialize` is not satisfied
    --> crates/tabby/src/api/types.rs:9:17
     |
9    | #[derive(Debug, Serialize, Deserialize, ToSchema)]
     |                 ^^^^^^^^^ the trait `Serialize` is not implemented for `GraphQLService`
10   | pub struct AppState {
11   |     pub graphql: GraphQLService,
     |     --- required by a bound introduced by this call
     |
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 810 others
note: required by a bound in `types::_::_serde::ser::SerializeStruct::serialize_field`
    --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.203/src/ser/mod.rs:1860:21
     |
1858 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1859 |     where
1860 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `types::Context: Serialize` is not satisfied
    --> crates/tabby/src/api/types.rs:9:17
     |
9    | #[derive(Debug, Serialize, Deserialize, ToSchema)]
     |                 ^^^^^^^^^ the trait `Serialize` is not implemented for `types::Context`
...
12   |     pub context: Context,
     |     --- required by a bound introduced by this call
     |
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 810 others
note: required by a bound in `types::_::_serde::ser::SerializeStruct::serialize_field`
    --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.203/src/ser/mod.rs:1860:21
     |
1858 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1859 |     where
1860 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `GraphQLService: Deserialize<'_>` is not satisfied
    --> crates/tabby/src/api/types.rs:11:18
     |
11   |     pub graphql: GraphQLService,
     |                  ^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `GraphQLService`
     |
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 855 others
note: required by a bound in `next_element`
    --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.203/src/de/mod.rs:1726:12
     |
1724 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1725 |     where
1726 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `types::Context: Deserialize<'_>` is not satisfied
    --> crates/tabby/src/api/types.rs:12:18
     |
12   |     pub context: Context,
     |                  ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `types::Context`
     |
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 855 others
note: required by a bound in `next_element`
    --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.203/src/de/mod.rs:1726:12
     |
1724 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1725 |     where
1726 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `GraphQLService: Deserialize<'_>` is not satisfied
    --> crates/tabby/src/api/types.rs:11:18
     |
11   |     pub graphql: GraphQLService,
     |                  ^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `GraphQLService`
     |
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 855 others
note: required by a bound in `next_value`
    --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.203/src/de/mod.rs:1865:12
     |
1863 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1864 |     where
1865 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `types::Context: Deserialize<'_>` is not satisfied
    --> crates/tabby/src/api/types.rs:12:18
     |
12   |     pub context: Context,
     |                  ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `types::Context`
     |
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 855 others
note: required by a bound in `next_value`
    --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.203/src/de/mod.rs:1865:12
     |
1863 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1864 |     where
1865 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `GraphQLService: Deserialize<'_>` is not satisfied
  --> crates/tabby/src/api/types.rs:9:28
   |
9  | #[derive(Debug, Serialize, Deserialize, ToSchema)]
   |                            ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `GraphQLService`
   |
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 855 others
note: required by a bound in `types::_::_serde::__private::de::missing_field`
  --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.203/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `types::Context: Deserialize<'_>` is not satisfied
  --> crates/tabby/src/api/types.rs:9:28
   |
9  | #[derive(Debug, Serialize, Deserialize, ToSchema)]
   |                            ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `types::Context`
   |
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 855 others
note: required by a bound in `types::_::_serde::__private::de::missing_field`
  --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.203/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `GraphQLService: ToSchema` is not satisfied
  --> crates/tabby/src/api/types.rs:11:18
   |
11 |     pub graphql: GraphQLService,
   |                  ^^^^^^^^^^^^^^ the trait `ToSchema` is not implemented for `GraphQLService`
   |
   = help: the following other types implement trait `ToSchema`:
             &'t [T]
             &'t mut [T]
             &str
             ()
             AppState
             BTreeMap<K, T>
             BTreeSet<K>
             Box<T>
           and 70 others

error[E0277]: the trait bound `GraphQLService: PartialSchema` is not satisfied
   --> crates/tabby/src/api/types.rs:11:18
    |
11  |     pub graphql: GraphQLService,
    |                  ^^^^^^^^^^^^^^ the trait `ComposeSchema` is not implemented for `GraphQLService`
    |
    = help: the following other types implement trait `ComposeSchema`:
              &[T]
              &mut [T]
              &str
              AppState
              BTreeMap<K, T>
              BTreeSet<K>
              Box<T>
              ChangePasswordInput
            and 68 others
    = note: required for `GraphQLService` to implement `PartialSchema`
note: required by a bound in `name`
   --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.3.1/src/lib.rs:370:21
    |
370 | pub trait ToSchema: PartialSchema {
    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`
...
401 |     fn name() -> Cow<'static, str> {
    |        ---- required by a bound in this associated function

error[E0277]: the trait bound `types::Context: ToSchema` is not satisfied
  --> crates/tabby/src/api/types.rs:12:18
   |
12 |     pub context: Context,
   |                  ^^^^^^^ the trait `ToSchema` is not implemented for `types::Context`
   |
   = help: the following other types implement trait `ToSchema`:
             &'t [T]
             &'t mut [T]
             &str
             ()
             AppState
             BTreeMap<K, T>
             BTreeSet<K>
             Box<T>
           and 70 others

error[E0277]: the trait bound `types::Context: PartialSchema` is not satisfied
   --> crates/tabby/src/api/types.rs:12:18
    |
12  |     pub context: Context,
    |                  ^^^^^^^ the trait `ComposeSchema` is not implemented for `types::Context`
    |
    = help: the following other types implement trait `ComposeSchema`:
              &[T]
              &mut [T]
              &str
              AppState
              BTreeMap<K, T>
              BTreeSet<K>
              Box<T>
              ChangePasswordInput
            and 68 others
    = note: required for `types::Context` to implement `PartialSchema`
note: required by a bound in `name`
   --> /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utoipa-5.3.1/src/lib.rs:370:21
    |
370 | pub trait ToSchema: PartialSchema {
    |                     ^^^^^^^^^^^^^ required by this bound in `ToSchema::name`
...
401 |     fn name() -> Cow<'static, str> {
    |        ---- required by a bound in this associated function

Some errors have detailed explanations: E0277, E0412.
For more information about an error, try `rustc --explain E0277`.
warning: `tabby` (lib) generated 1 warning
error: could not compile `tabby` (lib) due to 29 previous errors; 1 warning emitted
